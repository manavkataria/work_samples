#!/usr/bin/env python

import pandas as pd
import utils


class PostfixParser(object):
    """
        PostfixParser class.

        NOTE: This class abstracts the input _format_ specific parsing. Input format is likely
        to change with time. Ideally, there should be dedicated classes for each input source
        isolating format specific parsing functionality.

        Idempotent Interfaces:
            PostfixParser(): Constructor that loads & parses input spreadsheet
            parser.evaluate(): Evaluate: Postfix Expressions

        Non-Idempotent Interfaces:
            generate_report(): Report: Produce Output Spreadsheet
    """

    def __init__(self, input_csv_path):
        """
            Construtor for `PostfixParser`.

            Performs the following steps:
            #     1. Loads facilities, covenants and loans csv into dataframes.
            #     2. Parses facilities and covenants into a unified list of `Facility` objects.
            #     3. Sorts `facilities_list` by `interest_rate` to optimize yield
            #
            # Arguments:
            #     input_csv_path (string)
            #     covenants_csv_path (string)
            #     loans_csv_path (string)
            #
            # Returns:
            #     `PostfixParser` object
            #
            # Raises:
            #     OSError: if any of the input files are not accessible
        """

        # Load Spreadsheet
        column_names = ['a', 'b', 'c', 'd']  # TODO(Future): Ideally this should be autogenerated
        self.spreadsheet_df = pd.read_csv(input_csv_path, names=column_names, index_col=False)

        self.substitute_cells()

    def substitute_cells(self):
        """
            substitute_cells

            Assuming:
                1. No recurssive references
                2. No double indirection
        """

        for col in self.spreadsheet_df.columns:
            for row in range(len(self.spreadsheet_df)):
                # print(col, row, self.spreadsheet_df[col][row])
                cell = self.spreadsheet_df[col][row]

                
                # import ipdb; ipdb.set_trace()


    def evaluate(self):
        """
            Evaluate each of the cells in spreadsheet_df while substituting corresponding cells
        """
        pass

    def generate_report(self, output_csv):
        """

        """
        pass
